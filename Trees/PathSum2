//https://leetcode.com/problems/path-sum-ii

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> res =new ArrayList<List<Integer>>();
        List<Integer> curr =new ArrayList<Integer>();
        helperPathSum(root,targetSum,res,curr);
        return res;  
    }

    public void helperPathSum(TreeNode root, int targetSum, List<List<Integer>> res,List<Integer> curr){
//base condition   
if(root==null){return;}
//since array need to add
    curr.add(root.val);
//base condition
    if(root.left==null && root.right==null && root.val==targetSum){
        res.add(new ArrayList(curr));
    }

    if(root.left!=null) helperPathSum(root.left,targetSum-root.val,res,curr);
     if(root.right!=null)helperPathSum(root.right,targetSum-root.val,res,curr);
//popping out because of array and backtracking
     curr.remove(curr.size()-1);
}
}
