/** Pre Order
Root->L>R
https://leetcode.com/problems/binary-tree-preorder-traversal/
**/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res=new ArrayList<Integer>();
        helper(root,res);
        return res;
    }

    public void helper(TreeNode root,List<Integer> res){
        if(root==null) return ;
        res.add(root.val);
        helper(root.left,res);
        helper(root.right,res);
    }
}

/** 
Post Order 
L->R->Root
https://leetcode.com/problems/binary-tree-postorder-traversal/
**/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res=new ArrayList<Integer>();
        helper(root,res);
        return res;
    }

    public void helper(TreeNode root,List<Integer> res){
        if(root==null) return ;
        helper(root.left,res);
        helper(root.right,res);
         res.add(root.val);
}
}

/**
Inorder traversal
L->Root->R
https://leetcode.com/problems/binary-tree-inorder-traversal/
**/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res=new ArrayList<Integer>();
        helper(root,res);
        return res;

    }
    public void helper(TreeNode root,List<Integer> res){
        if(root==null) return ;
        helper(root.left,res);
        res.add(root.val);
        helper(root.right,res);
        
}
}

/**
Level Order Traversal
https://leetcode.com/problems/binary-tree-level-order-traversal/
**/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res=new ArrayList<List<Integer>>();
        Queue<TreeNode> q=new LinkedList<TreeNode>();

        if(root ==null) return res;
        q.add(root);

        while(!q.isEmpty()){
            int size=q.size();
            List<Integer> temp=new ArrayList<Integer>();
            for(int i=0;i<size;i++){
            TreeNode front= q.remove();
            temp.add(front.val);

                if(front.left!=null) {
                    q.add(front.left);
                }
                if(front.right!=null){
                    q.add(front.right);
                }
            }
            res.add(new ArrayList(temp));
        }
        return res;
    }
}

