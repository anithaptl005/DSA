//https://leetcode.com/problems/validate-binary-search-tree/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {

        //Long data type is to handle edge case of integer value 
       return isValidBSTHelper(root,Long.MIN_VALUE,Long.MAX_VALUE);
    }

    public boolean isValidBSTHelper(TreeNode root, long min, long max){
        if(root==null) return true;

        if(root.val<=min ||root.val>=max){
            return false;
        }

        return isValidBSTHelper(root.left,min,root.val) && isValidBSTHelper(root.right, root.val,max);
    }
}

/**
Solution by passing TreeNode in place of Long
**/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        
       return isValidBSTHelper(root,null,null);
    }

    public boolean isValidBSTHelper(TreeNode root, TreeNode min, TreeNode max){
        if(root==null) return true;

        if((min==null || root.val>min.val) && (max==null||root.val<max.val)){
            return isValidBSTHelper(root.left,min,root) && isValidBSTHelper(root.right, root,max);
        }
        return false;

        
    }
}
