//https://leetcode.com/problems/min-cost-climbing-stairs
/**
recursion - runtime - TLE
**/

class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int n=cost.length;
     return Math.min(helperMinCostClimbingStairs(n-1,cost),helperMinCostClimbingStairs(n-2,cost));
    // return helperMinCostClimbingStairs(n,cost);
      
    }

    public int helperMinCostClimbingStairs(int ind,int[] cost){
        if(ind<=1) return cost[ind];

        return  cost[ind] +  Math.min(helperMinCostClimbingStairs(ind-1,cost),helperMinCostClimbingStairs(ind-2,cost));
      
    }
}
/**
Memoisation - runtime- 1s
/**
class Solution {
    
    public int minCostClimbingStairs(int[] cost) {
        int n=cost.length;
        int[] dp=new int[n+1];
        for(int i=0;i<n;i++){
            dp[i]=-1;
        }
     return dp[n]=Math.min(helperMinCostClimbingStairs(n-1,cost,dp),helperMinCostClimbingStairs(n-2,cost,dp));
    // return helperMinCostClimbingStairs(n,cost);
      
    }

    public int helperMinCostClimbingStairs(int ind,int[] cost,int[] dp){
        if(ind<=1) return dp[ind]=cost[ind];
        if(dp[ind]!=-1) return dp[ind];

        return  dp[ind]=cost[ind] +  Math.min(helperMinCostClimbingStairs(ind-1,cost,dp),helperMinCostClimbingStairs(ind-2,cost,dp));
      
    }
}

/**
bottom up approach - runtime - 0s
**/

class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int n = cost.length;
 		int[] dp = new int[n + 1];
 		dp[0] = cost[0];
 		dp[1] = cost[1];
 		for(int i = 2; i < n; i++){
 			
 			dp[i] = cost[i] + Math.min(dp[i - 1], dp[i - 2]);
 		}
 		return dp[n]=Math.min(dp[n - 1], dp[n - 2]);
    }
}

/**
space optimisation
**/

class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int n=cost.length;

        if(n==0) return cost[0];
        if(n==1) return cost[1];

        for(int i=2;i<n;i++){
            cost[i]=cost[i]+Math.min(cost[i-1],cost[i-2]);
        }

        return Math.min(cost[n-1],cost[n-2]);
    }

}
