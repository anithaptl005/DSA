// https://leetcode.com/problems/house-robber/

/** 
recursion
**/
class Solution {
    public int rob(int[] nums) {
      return  helperRob(nums.length-1,nums);
        
    }

    public int helperRob(int ind, int[] nums){
        if(ind<0) return 0;

        //inc
        int inc = nums[ind]+helperRob(ind-2,nums);

        //exc
        int exc = helperRob(ind-1,nums);

        return  Math.max(inc,exc);

    }
}

/**
Bottom up - runtime - 0 ms
**/

class Solution {
    public int rob(int[] nums) {
        int n=nums.length;
        int[] dp=new int[n+1];
        if(n==0) return 0;
        if(n==1) return nums[0];
        dp[0]=nums[0];
        dp[1]=Math.max(nums[0],nums[1]);
        for(int i=2;i<n;i++)
        {
            dp[i]=Math.max(dp[i-1],dp[i-2]+nums[i]);
        }
      return  dp[n-1];
        
    }

/**
space optimisation -runtime -0ms
**/
class Solution {
    public int rob(int[] nums) {
        int n=nums.length;
        if(n==0) return 0;
        if(n==1) return nums[0];
        int first=nums[0];
        int second=Math.max(nums[0],nums[1]);
        int result=0;
        for(int i=2;i<n;i++)
        {
            result=second;
            second=Math.max(first+nums[i],second);
            first=result;
        }
      return  second;
        
    }
